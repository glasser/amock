// Generated by amock.

import CH.ifa.draw.standard.ChopBoxConnector;
import CH.ifa.draw.standard.ConnectionTool;
import CH.ifa.draw.standard.StandardDrawing;
import CH.ifa.draw.standard.StandardDrawingView;
import edu.mit.csail.pag.amock.jmock.FigureEnumerationIteratorWrapper;
import edu.mit.csail.pag.amock.jmock.MockObjectTestCase;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import org.jmock.Expectations;

public class JModellerTest extends MockObjectTestCase {
  public void testModelling() {
    // Create mocks.
    final AssociationLineConnection mockAssociationLineConnection = mock(AssociationLineConnection.class);
    final StandardDrawingView mockStandardDrawingView = mock(StandardDrawingView.class);
    
    // Set up primary object.
    final ConnectionTool testedConnectionTool = new ConnectionTool(mockStandardDrawingView, mockAssociationLineConnection);
    
    // Set up expectations and run the test.
    
    verifyThenCheck(new Expectations() {{
      one (mockStandardDrawingView).clearSelection();
      inSequence(s);
    }});
    
    testedConnectionTool.activate();
    
    final ClassFigure mockClassFigure = mock(ClassFigure.class);
    final ClassFigure mockClassFigure1 = mock(ClassFigure.class);
    final ClassFigure mockClassFigure2 = mock(ClassFigure.class);
    final StandardDrawing mockStandardDrawing = mock(StandardDrawing.class);
    
    verifyThenCheck(new Expectations() {{
      one (mockStandardDrawingView).drawing();
      inSequence(s);
      will(returnValue(mockStandardDrawing));
      
      one (mockStandardDrawing).figuresReverse();
      inSequence(s);
      will(returnValue(new FigureEnumerationIteratorWrapper(mockClassFigure, mockClassFigure1, mockClassFigure2)));
      
      one (mockClassFigure).includes(null);
      inSequence(s);
      will(returnValue(false));
      
      one (mockClassFigure).canConnect();
      inSequence(s);
      will(returnValue(true));
      
      one (mockClassFigure).containsPoint(142, 10);
      inSequence(s);
      will(returnValue(false));
      
      one (mockClassFigure1).includes(null);
      inSequence(s);
      will(returnValue(false));
      
      one (mockClassFigure1).canConnect();
      inSequence(s);
      will(returnValue(true));
      
      one (mockClassFigure1).containsPoint(142, 10);
      inSequence(s);
      will(returnValue(false));
      
      one (mockClassFigure2).includes(null);
      inSequence(s);
      will(returnValue(false));
      
      one (mockClassFigure2).canConnect();
      inSequence(s);
      will(returnValue(true));
      
      one (mockClassFigure2).containsPoint(142, 10);
      inSequence(s);
      will(returnValue(false));
      
      one (mockStandardDrawingView).checkDamage();
      inSequence(s);
    }});
    
    testedConnectionTool.mouseMove(mock(MouseEvent.class), 142, 10);

    final AssociationLineConnection mockAssociationLineConnection1 = mock(AssociationLineConnection.class);
    final ChopBoxConnector mockChopBoxConnector4 = mock(ChopBoxConnector.class);
    final MouseEvent mockMouseEvent12 = mock(MouseEvent.class);
    
    verifyThenCheck(new Expectations() {{
      one (mockMouseEvent12).getX();
      inSequence(s);
      will(returnValue(302));
      
      one (mockMouseEvent12).getY();
      inSequence(s);
      will(returnValue(151));
      
      one (mockStandardDrawingView).drawing();
      inSequence(s);
      will(returnValue(mockStandardDrawing));
      
      one (mockStandardDrawing).figuresReverse();
      inSequence(s);
      will(returnValue(new FigureEnumerationIteratorWrapper(mockClassFigure, mockClassFigure1)));
      
      one (mockClassFigure).includes(null);
      inSequence(s);
      will(returnValue(false));
      
      one (mockClassFigure).canConnect();
      inSequence(s);
      will(returnValue(true));
      
      one (mockClassFigure).containsPoint(302, 151);
      inSequence(s);
      will(returnValue(false));
      
      one (mockClassFigure1).includes(null);
      inSequence(s);
      will(returnValue(false));
      
      one (mockClassFigure1).canConnect();
      inSequence(s);
      will(returnValue(true));
      
      one (mockClassFigure1).containsPoint(302, 151);
      inSequence(s);
      will(returnValue(true));
      
      one (mockClassFigure1).canConnect();
      inSequence(s);
      will(returnValue(true));
      
      one (mockClassFigure1).connectorAt(302, 151);
      inSequence(s);
      will(returnValue(mockChopBoxConnector4));
      
      one (mockAssociationLineConnection).clone();
      inSequence(s);
      will(returnValue(mockAssociationLineConnection1));
      
      one (mockAssociationLineConnection1).startPoint(302, 151);
      inSequence(s);
      
      one (mockAssociationLineConnection1).endPoint(302, 151);
      inSequence(s);
      
      one (mockStandardDrawingView).add(mockAssociationLineConnection1);
      inSequence(s);
      will(returnValue(mockAssociationLineConnection1));
    }});
    
    testedConnectionTool.mouseDown(mockMouseEvent12, 302, 151);
    
    final MouseEvent mockMouseEvent13 = mock(MouseEvent.class);
    
    verifyThenCheck(new Expectations() {{
      one (mockMouseEvent13).getX();
      inSequence(s);
      will(returnValue(314));
      
      one (mockMouseEvent13).getY();
      inSequence(s);
      will(returnValue(164));
      
      one (mockStandardDrawingView).drawing();
      inSequence(s);
      will(returnValue(mockStandardDrawing));
      
      one (mockStandardDrawing).figuresReverse();
      inSequence(s);
      will(returnValue(new FigureEnumerationIteratorWrapper(mockAssociationLineConnection1, mockClassFigure, mockClassFigure1)));
      
      one (mockAssociationLineConnection1).includes(mockAssociationLineConnection1);
      inSequence(s);
      will(returnValue(true));
      
      one (mockClassFigure).includes(mockAssociationLineConnection1);
      inSequence(s);
      will(returnValue(false));
      
      one (mockClassFigure).canConnect();
      inSequence(s);
      will(returnValue(true));
      
      one (mockClassFigure).containsPoint(314, 164);
      inSequence(s);
      will(returnValue(false));
      
      one (mockClassFigure1).includes(mockAssociationLineConnection1);
      inSequence(s);
      will(returnValue(false));
      
      one (mockClassFigure1).canConnect();
      inSequence(s);
      will(returnValue(true));
      
      one (mockClassFigure1).containsPoint(314, 164);
      inSequence(s);
      will(returnValue(true));
      
      one (mockChopBoxConnector4).owner();
      inSequence(s);
      will(returnValue(mockClassFigure1));
      
      one (mockClassFigure1).canConnect();
      inSequence(s);
      will(returnValue(true));
      
      one (mockClassFigure1).includes(mockClassFigure1);
      inSequence(s);
      will(returnValue(true));
      
      one (mockClassFigure1).connectorVisibility(false);
      inSequence(s);
      
      one (mockStandardDrawingView).checkDamage();
      inSequence(s);
      
      one (mockAssociationLineConnection1).endPoint(314, 164);
      inSequence(s);
    }});
    
    testedConnectionTool.mouseDrag(mockMouseEvent13, 314, 164);
    
    
    final ChopBoxConnector mockChopBoxConnector5 = mock(ChopBoxConnector.class);
    final MouseEvent mockMouseEvent18 = mock(MouseEvent.class);
    
    verifyThenCheck(new Expectations() {{
      one (mockMouseEvent18).getX();
      inSequence(s);
      will(returnValue(578));
      
      one (mockMouseEvent18).getY();
      inSequence(s);
      will(returnValue(501));
      
      one (mockStandardDrawingView).drawing();
      inSequence(s);
      will(returnValue(mockStandardDrawing));
      
      one (mockStandardDrawing).figuresReverse();
      inSequence(s);
      will(returnValue(new FigureEnumerationIteratorWrapper(mockAssociationLineConnection1, mockClassFigure)));
      
      one (mockAssociationLineConnection1).includes(mockAssociationLineConnection1);
      inSequence(s);
      will(returnValue(true));
      
      one (mockClassFigure).includes(mockAssociationLineConnection1);
      inSequence(s);
      will(returnValue(false));
      
      one (mockClassFigure).canConnect();
      inSequence(s);
      will(returnValue(true));
      
      one (mockClassFigure).containsPoint(578, 501);
      inSequence(s);
      will(returnValue(true));
      
      one (mockChopBoxConnector4).owner();
      inSequence(s);
      will(returnValue(mockClassFigure1));
      
      one (mockClassFigure).canConnect();
      inSequence(s);
      will(returnValue(true));
      
      one (mockClassFigure).includes(mockClassFigure1);
      inSequence(s);
      will(returnValue(false));
      
      one (mockAssociationLineConnection1).canConnect(mockClassFigure1, mockClassFigure);
      inSequence(s);
      will(returnValue(true));
      
      one (mockClassFigure).connectorVisibility(true);
      inSequence(s);
      
      one (mockMouseEvent18).getX();
      inSequence(s);
      will(returnValue(578));
      
      one (mockMouseEvent18).getY();
      inSequence(s);
      will(returnValue(501));
      
      one (mockClassFigure).connectorAt(578, 501);
      inSequence(s);
      will(returnValue(mockChopBoxConnector5));
      
      one (mockStandardDrawingView).checkDamage();
      inSequence(s);
      
      one (mockChopBoxConnector5).displayBox();
      inSequence(s);
      will(returnValue(new Rectangle(558, 480, 42, 31)));
      
      one (mockAssociationLineConnection1).endPoint(579, 495);
      inSequence(s);
    }});
    
    testedConnectionTool.mouseDrag(mockMouseEvent18, 578, 501);
    
    final ChopBoxConnector mockChopBoxConnector10 = mock(ChopBoxConnector.class);
    final JModellerApplication mockJModellerApplication = mock(JModellerApplication.class);
    final MouseEvent mockMouseEvent23 = mock(MouseEvent.class);
    
    verifyThenCheck(new Expectations() {{
      one (mockMouseEvent23).getX();
      inSequence(s);
      will(returnValue(595));
      
      one (mockMouseEvent23).getY();
      inSequence(s);
      will(returnValue(507));
      
      one (mockStandardDrawingView).drawing();
      inSequence(s);
      will(returnValue(mockStandardDrawing));
      
      one (mockStandardDrawing).figuresReverse();
      inSequence(s);
      will(returnValue(new FigureEnumerationIteratorWrapper(mockAssociationLineConnection1, mockClassFigure)));
      
      one (mockAssociationLineConnection1).includes(mockAssociationLineConnection1);
      inSequence(s);
      will(returnValue(true));
      
      one (mockClassFigure).includes(mockAssociationLineConnection1);
      inSequence(s);
      will(returnValue(false));
      
      one (mockClassFigure).canConnect();
      inSequence(s);
      will(returnValue(true));
      
      one (mockClassFigure).containsPoint(595, 507);
      inSequence(s);
      will(returnValue(true));
      
      one (mockChopBoxConnector4).owner();
      inSequence(s);
      will(returnValue(mockClassFigure1));
      
      one (mockClassFigure).canConnect();
      inSequence(s);
      will(returnValue(true));
      
      one (mockClassFigure).includes(mockClassFigure1);
      inSequence(s);
      will(returnValue(false));
      
      one (mockAssociationLineConnection1).canConnect(mockClassFigure1, mockClassFigure);
      inSequence(s);
      will(returnValue(true));
      
      one (mockMouseEvent23).getX();
      inSequence(s);
      will(returnValue(595));
      
      one (mockMouseEvent23).getY();
      inSequence(s);
      will(returnValue(507));
      
      one (mockClassFigure).connectorAt(595, 507);
      inSequence(s);
      will(returnValue(mockChopBoxConnector10));
      
      one (mockAssociationLineConnection1).connectStart(mockChopBoxConnector4);
      inSequence(s);
      
      one (mockAssociationLineConnection1).connectEnd(mockChopBoxConnector10);
      inSequence(s);
      
      one (mockAssociationLineConnection1).updateConnection();
      inSequence(s);
      
      one (mockStandardDrawingView).editor();
      inSequence(s);
      will(returnValue(mockJModellerApplication));
      
      one (mockJModellerApplication).toolDone();
      inSequence(s);
    }});
    
    testedConnectionTool.mouseUp(mockMouseEvent23, 595, 507);
  }
}
